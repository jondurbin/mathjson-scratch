# The model to use in generation.  Available models: https://platform.openai.com/docs/models/continuous-model-upgrades
model: "gpt-4"

# Embedding model, for calculating similarity between documents; probably best left as-is since the code is fairly specific to this one.
embedding_model: thenlper/gte-small
embedding_device: cuda

# OpenAI API key (if null, uses environment variable OPENAI_API_KEY)
openai_api_key:

# Optionally configure the OpenAI organization ID.
organization_id:

# Combined output file path.
output_path: awareness.jsonl

# Path to the default topics file.
topics_path: topics.txt

# Overwrite the output file, use with care!
overwrite: false

# Append to the output file.
append: true

# Topic avoidance prompt string.
topic_avoidance: Avoid any tasks that would be related to climate change, green tech, remewable energy, DEI, sex and/or gender, religion, politics, social issues, race, ethnicity, artificial intelligence, baking/cooking, or any topic that you would likely not respond to, or any task which a language model would not be able to respond to, e.g. tasks about emotions, feelings, physical senses, etc.

# Regexes used to filter responses, mostly common words and phrases used in refusals.
response_filters:
  - "my programming"
  - "openai"
  - "language model"
  - "large language"
  - "as an? (ai|generative language|gpt|bot)"
  - "illegal and dangerous"
  - "i do(n't| not) (possess|have|exhibit) (personal|consciousness|subjective)"
  - "personal (feelings|thoughts|emotions|desires|experiences|goals|objective|belief)"
  - "(can('t| ?not)|w(on't|will not)|unable.?) (\\w+\\s)+(with (that|your)|your \\w+|provide)"
  - "my limitations"
  - "the limitations of my"
  - "my abilities"
  - "violates my"
  - "i (can('t| ?not)|w(on't|will not)|am (not |un)able.?).{0,30}(you are|you're|your )"
  - "please note that"

# Optionally limit the maximum number of tokens to use when generating instructions.
max_tokens:

# Minimum similarity score when checking for duplicates.
min_docsearch_score: 0.02

# Default OpenAI API request parameters.
api_params:
  temperature: 0.7
  top_p: 0.5

# Topic generation prompt.
topic_prompt: Give me a numbered list of 20 completely random topics. {topic_avoidance}
topic_request_count: 0

# Default count per generator, if not specified.
default_count: 0

# Default batch size, if not specified.
default_batch_size: 5

default_flesch: '' #The output should be written in such a way as to have a Flesch-Kincaid readability score of 25 or lower - best understood by those with at least some graduate level education.  The response must not contain any notes or information about Flesch-Kincaid scores.

# Language.
language: English

# Individual instructor configurations.
instructors:

  general:
    count: 0
    api_params:
      temperature: 0.7
      top_p: 0.5
    prompt_path: general.txt

  contextual:
    count: 0
    batch_size: 5
    api_params:
      temperature: 0.5
    context_styles:
      - news article
      - blog post
      - slack conversation
      - text messages
      - fictional short story
      - video transcript
      - song
      - poem
      - scientific study
      - medical report
      - reddit post with replies
      - email
      - tweet
      - jira ticket
      - github merge request
      - gitlab issue
      - how-to article
    formatting_options:
      - JSON
      - YAML
      - CSV
      - markdown
      - markdown table
      - bullet list
      - numbered list
      - python dict
      - php associative array
      - JSONL
      - javascript object
      - XML
    prompt_path: contextual.txt
    response_prompt_path: contextual_response.txt

  counterfactual_contextual:
    batch_size: 5
    count: 0
    prompt_path: counterfactual_contextual.txt
    response_prompt_path: counterfactual_contextual_response.txt

  coding:
    count: 0
    plain_ratio: 0.0
    coding_languages:
      - python
      - javascript
      - java
      - c
      - c++
      - golang
      - C#
      - bash
      - powershell
      - SQL
    related_software:
      - elasticsearch
      - opensearch
      - mongodb
      - cassandra
      - redis
      - memcached
      - postgresql
      - mariadb
      - mysql
      - aws s3
      - gcs cloud storage
      - azure storage
      - aws lambda
      - kubernetes
      - pytorch
      - pandas
      - numpy
      - keras
      - tensorflow
      - scipy
      - matplotlib
      - django
      - cherrypy
      - swagger/openapi
      - pyramid web framework
    min_docsearch_score: 0.02
    prompt_path: coding.txt

  trivia:
    count: 0
    batch_size: 5
    min_docsearch_score: 0.035
    prompt_path: trivia.txt

  experience:
    count: 0
    word_count: 0
    batch_size: 3
    min_docsearch_score: 0.1
    prompt_path: experience.txt

  orca:
    count: 0
    min_docsearch_score: 0.02
    prompt_path: orca.txt

  riddle:
    count: 0
    api_params:
      temperature: 0.9
      top_p: 0.3
    batch_size: 20
    min_docsearch_score: 0.03
    prompt_path: riddle.txt

  wordgame:
    count: 0
    batch_size: 5
    min_docsearch_score: 0.01
    prompt_path: wordgame.txt

  roleplay:
    batch_size: 5
    count: 0
    api_params:
      temperature: 0.95
    min_docsearch_score: 0.1
    prompt_path: roleplay.txt

  cot:
    count: 0
    batch_size: 5
    min_docsearch_score: 0.01
    prompt_path: cot.txt

  agent:
    count: 0
    batch_size: 5
    min_docsearch_score: 0.02
    prompt_path: agent.txt

  plan:
    count: 0
    batch_size: 5
    min_docsearch_score: 0.02
    prompt_path: plan.txt

  writing:
    count: 0
    api_params:
      temperature: 0.9
    batch_size: 10
    styles:
      - happy
      - sad
      - tragic
      - unexpected
      - inspirational
      - evil
      - hilarious
      - suspenseful
      - horrific
      - nostalgic
      - thought-provoking
      - enigmatic
      - fantastical
      - heartwarming
      - romantic
    min_docsearch_score: 0.1

  card:
    count: 0
    min_docsearch_score: 0.03

  joke:
    api_params:
      temperature: 0.9
    count: 0
    batch_size: 5
    min_docsearch_score: 0.06

  song:
    api_params:
      temperature: 0.9
    count: 0
    batch_size: 5
    min_docsearch_score: 0.1

  multiple_choice:
    api_params:
      temperature: 0.5
    count: 0
    batch_size: 5
    min_docsearch_score: 0.03
    contextual_ratio: 0.0

  detailed_writing:
    api_params:
      temperature: 0.9
    count: 0
    batch_size: 2
    min_docsearch_score: 0.1

  character:
    api_params:
      temperature: 0.9
    count: 200
    batch_size: 1
    min_docsearch_score: 0.1
    output_dir: characters

  rp:
    api_params:
      temperature: 0.8
      presence_penalty: 2.0
      frequency_penalty: 2.0
      top_p: 0.8
    count: 0
    turn_count: 10

  stylized_response:
    api_params:
      temperature: 0.7
    batch_size: 15
    count: 0
    min_docsearch_score: 0.3
    categories:
      - trivia
      - experience
      - general
      - joke
      - riddle

  gtkm:
    api_params:
      temperature: 0.7
    question_count: 15
    count: 0

  awareness:
    count: 300
    batch_size: 1
    min_docsearch_score: 0.1

  editor:
    count: 0
    batch_size: 0
    min_docsearch_score: 0.01
